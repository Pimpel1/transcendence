# Generated by Django 5.0.7 on 2024-10-04 15:21

import django.db.models.deletion
import django.utils.timezone
import matchmaker_app.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Lock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('acquired_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('channel_name', models.CharField(blank=True, max_length=255, null=True)),
                ('message_queue', models.JSONField(blank=True, default=list, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.CharField(default=matchmaker_app.models.generate_random_string, editable=False, max_length=32, primary_key=True, serialize=False, unique=True)),
                ('type', models.CharField(choices=[('online', 'Online'), ('local', 'Local')], default='online', max_length=10)),
                ('name', models.CharField(max_length=100)),
                ('player_names', models.JSONField(blank=True, default=list, null=True)),
                ('pool_size', models.IntegerField()),
                ('status', models.CharField(choices=[('waiting_for_players', 'Waiting for Players'), ('in_progress', 'In Progress'), ('finished', 'Finished')], default='waiting_for_players')),
                ('current_round_number', models.IntegerField(default=0)),
                ('players', models.ManyToManyField(blank=True, related_name='tournaments', to='matchmaker_app.player')),
            ],
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.IntegerField()),
                ('type', models.CharField(choices=[('online', 'Online'), ('local', 'Local')], default='online', max_length=10)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rounds', to='matchmaker_app.tournament')),
            ],
            options={
                'unique_together': {('tournament', 'round_number')},
            },
        ),
        migrations.CreateModel(
            name='LeaderboardEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_name', models.CharField(max_length=100)),
                ('games_played', models.IntegerField(default=0)),
                ('games_won', models.IntegerField(default=0)),
                ('goals_for', models.IntegerField(default=0)),
                ('goals_against', models.IntegerField(default=0)),
                ('goal_difference', models.IntegerField(default=0)),
                ('points', models.IntegerField(default=0)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matchmaker_app.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.CharField(default=matchmaker_app.models.generate_random_string, editable=False, max_length=32, primary_key=True, serialize=False, unique=True)),
                ('type', models.CharField(choices=[('online', 'Online'), ('local', 'Local')], default='online', max_length=10)),
                ('player1_name', models.CharField(blank=True, max_length=100, null=True)),
                ('player2_name', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(choices=[('waiting_for_players', 'Waiting for Players'), ('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('finished', 'Finished')], default='waiting_for_players', max_length=20)),
                ('player1_score', models.IntegerField(default=0)),
                ('player2_score', models.IntegerField(default=0)),
                ('player1_position', models.CharField(default='left', max_length=10)),
                ('player2_position', models.CharField(default='right', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('finished_at', models.DateTimeField(blank=True, default=None, null=True)),
                ('player1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='games_as_player1', to='matchmaker_app.player')),
                ('player2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='games_as_player2', to='matchmaker_app.player')),
                ('round', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='games', to='matchmaker_app.round')),
                ('tournament', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='games', to='matchmaker_app.tournament')),
            ],
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.UniqueConstraint(condition=models.Q(('status', 'waiting_for_players')), fields=('player1', 'player2'), name='unique_private_waiting_game'),
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.UniqueConstraint(condition=models.Q(('player2__isnull', True), ('status', 'waiting_for_players')), fields=('status', 'player2'), name='unique_open_waiting_game'),
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.CheckConstraint(check=models.Q(('player1', models.F('player2')), _negated=True), name='player1_not_equal_to_player2'),
        ),
    ]
